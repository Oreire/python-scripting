# ---------------------------------------------------------------------
# üè∑Ô∏è Namespace Definition
# Creates an isolated environment for all ProjectA resources
# ---------------------------------------------------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: projecta
---
# ---------------------------------------------------------------------
# üöÄ Deployment
# Runs 3 replicas of the NGINX-based application
# Includes resource limits, liveness & readiness probes for resilience
# ---------------------------------------------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: week2-projecta-server
  namespace: projecta
  labels:
    app: week2-projecta-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: week2-projecta-server
  template:
    metadata:
      labels:
        app: week2-projecta-server
    spec:
      containers:
        - name: nginx-container
          image: projectaregistry.azurecr.io/oresky73/week5-server:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20
---
# ---------------------------------------------------------------------
# üîó ClusterIP Service
# Exposes the Deployment internally to the cluster
# ---------------------------------------------------------------------
# apiVersion: v1
# kind: Service
# metadata:
#   name: projecta-service
#   namespace: projecta
# spec:
#   type: ClusterIP
#   selector:
#     app: week2-projecta-server
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
apiVersion: v1
kind: Service
metadata:
  name: projecta-service
  namespace: projecta
spec:
  type: LoadBalancer   # expose externally via cloud provider
  selector:
    app: week2-projecta-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---
# ---------------------------------------------------------------------
# üîí Network Policy
# Restricts inbound traffic to only come from the ingress-nginx namespace
# ---------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-policy
  namespace: projecta
spec:
  podSelector:
    matchLabels:
      app: week2-projecta-server
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
  policyTypes:
    - Ingress
---
# ---------------------------------------------------------------------
# ‚öñÔ∏è Horizontal Pod Autoscaler (HPA)
# Dynamically scales pods based on CPU utilization
# ---------------------------------------------------------------------
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: projecta-hpa
  namespace: projecta
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: week2-projecta-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# ---------------------------------------------------------------------
# üîê Cert-Manager ClusterIssuer
# Configures Let's Encrypt production endpoint for automated TLS certificates
# ---------------------------------------------------------------------
# apiVersion: cert-manager.io/v1
# kind: ClusterIssuer
# metadata:
#   name: letsencrypt-prod
# spec:
#   acme:
#     email: your-email@example.com
#     server: https://acme-v02.api.letsencrypt.org/directory
#     privateKeySecretRef:
#       name: letsencrypt-prod
#     solvers:
#       - http01:
#           ingress:
#             class: nginx
---
# ---------------------------------------------------------------------
# üìú Certificate Resource
# Requests and stores TLS certificate for glanik.duckdns.org
# ---------------------------------------------------------------------
# apiVersion: cert-manager.io/v1
# kind: Certificate
# metadata:
#   name: glanik-cert
#   namespace: projecta
# spec:
#   secretName: glanik-tls
#   issuerRef:
#     name: letsencrypt-prod
#     kind: ClusterIssuer
#   commonName: glanik.duckdns.org
#   dnsNames:
#     - glanik.duckdns.org
#   privateKey:
#     rotationPolicy: Always
---
# ---------------------------------------------------------------------
# üåê Ingress Resource
# Routes external HTTPS traffic to the internal Service
# Handles ACME HTTP-01 challenge for certificate issuance
# ---------------------------------------------------------------------
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: projecta-ingress
#   namespace: projecta
#   annotations:
#     cert-manager.io/cluster-issuer: letsencrypt-prod
#     kubernetes.io/ingress.class: nginx
#     nginx.ingress.kubernetes.io/force-ssl-redirect: "false" # allow HTTP temporarily for ACME
#     nginx.ingress.kubernetes.io/use-regex: "true"
#     nginx.ingress.kubernetes.io/enable-modsecurity: "true"
#     nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
# spec:
#   ingressClassName: nginx
#   tls:
#     - hosts:
#         - glanik.duckdns.org
#       secretName: glanik-tls
#   rules:
#     - host: glanik.duckdns.org
#       http:
#         paths:
#           - path: /(.+)?       # All normal application traffic
#             pathType: ImplementationSpecific
#             backend:
#               service:
#                 name: projecta-service
#                 port:
#                   number: 80

# ---------------------------------------------------------------------
# üåê Ingress Resource (Temporary, HTTP only)
# Routes external traffic to the internal Service without TLS
# ---------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: projecta-ingress
  namespace: projecta
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"  # allow HTTP
    nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: glanik.duckdns.org
      http:
        paths:
          # Allow ACME challenge path for future TLS
          - path: /.well-known/acme-challenge(/|$)(.*)
            pathType: ImplementationSpecific
            backend:
              service:
                name: projecta-service
                port:
                  number: 80
          # Main application traffic
          - path: /(.+)?
            pathType: ImplementationSpecific
            backend:
              service:
                name: projecta-service
                port:
                  number: 80
